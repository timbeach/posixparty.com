<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<title>Star Click Game</title>
<style>
  body {
    margin: 0;
    background-color: #000;
    overflow: hidden;
    font-family: Arial, sans-serif;
    color: white;
    touch-action: manipulation;
  }
  canvas {
    display: block;
    touch-action: manipulation;
  }
  #score {
    position: absolute;
    top: 10px;
    left: 10px;
    font-size: 20px;
    font-weight: bold;
  }
</style>
</head>
<body>
<div id="score">Score: 0</div>
<canvas id="gameCanvas"></canvas>
<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let score = 0;
const scoreDisplay = document.getElementById('score');

const explosionSound = new Audio('https://www.soundjay.com/button/sounds/button-16.mp3');
const rainbowColors = ['#ff0000', '#ff7f00', '#ffff00', '#00ff00', '#0000ff', '#4b0082', '#9400d3'];

class Particle {
  constructor(x, y, angle, speed, color) {
    this.x = x;
    this.y = y;
    this.angle = angle;
    this.speed = speed;
    this.color = color;
    this.radius = 2 + Math.random() * 2;
    this.life = 30;
  }
  update() {
    this.x += Math.cos(this.angle) * this.speed;
    this.y += Math.sin(this.angle) * this.speed;
    this.life--;
  }
  draw() {
    ctx.beginPath();
    ctx.fillStyle = this.color;
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fill();
  }
}

class Star {
  constructor() {
    this.reset();
  }
  reset() {
    this.x = Math.random() * canvas.width;
    this.y = Math.random() * canvas.height;
    this.radius = 25 + Math.random() * 15; // bigger for mobile
    this.speedX = (Math.random() - 0.5) * 1.5;
    this.speedY = (Math.random() - 0.5) * 1.5;
    this.color = 'white';
    this.exploding = false;
    this.explosionRadius = 0;
    this.explosionFrames = 0;
    this.particles = [];
  }
  explode() {
    this.exploding = true;
    this.explosionRadius = this.radius;
    this.explosionFrames = 0;
    for (let i = 0; i < 30; i++) {
      const angle = Math.random() * Math.PI * 2;
      const speed = Math.random() * 3 + 1;
      const color = rainbowColors[Math.floor(Math.random() * rainbowColors.length)];
      this.particles.push(new Particle(this.x, this.y, angle, speed, color));
    }
  }
  update() {
    if (this.exploding) {
      this.explosionRadius += 3;
      this.explosionFrames++;
      this.particles.forEach(p => p.update());
      this.particles = this.particles.filter(p => p.life > 0);
      if (this.explosionFrames > 30 && this.particles.length === 0) {
        this.reset();
      }
      return;
    }
    this.x += this.speedX;
    this.y += this.speedY;
    if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
    if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
  }
  draw() {
    if (this.exploding) {
      const colorIndex = this.explosionFrames % rainbowColors.length;
      ctx.beginPath();
      ctx.fillStyle = rainbowColors[colorIndex];
      ctx.arc(this.x, this.y, this.explosionRadius, 0, Math.PI * 2);
      ctx.fill();
      this.particles.forEach(p => p.draw());
    } else {
      ctx.beginPath();
      ctx.fillStyle = this.color;
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      ctx.fill();
    }
  }
  isClicked(mx, my) {
    const hitRadius = this.exploding ? this.explosionRadius : this.radius;
    return Math.hypot(mx - this.x, my - this.y) < hitRadius;
  }
}

const stars = Array.from({ length: 50 }, () => new Star());

function handleClick(mx, my) {
  stars.forEach(star => {
    if (!star.exploding && star.isClicked(mx, my)) {
      star.explode();
      explosionSound.currentTime = 0;
      explosionSound.play();
      score++;
      scoreDisplay.textContent = `Score: ${score}`;
    }
  });
}

canvas.addEventListener('click', e => {
  const rect = canvas.getBoundingClientRect();
  handleClick(e.clientX - rect.left, e.clientY - rect.top);
});

canvas.addEventListener('touchstart', e => {
  e.preventDefault();
  const rect = canvas.getBoundingClientRect();
  const touch = e.touches[0];
  handleClick(touch.clientX - rect.left, touch.clientY - rect.top);
}, { passive: false });

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  stars.forEach(star => {
    star.update();
    star.draw();
  });
  requestAnimationFrame(animate);
}

animate();

window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});
</script>
</body>
</html>

